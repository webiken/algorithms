I'm practicing algorithms, and since Python is my main language, I've chosen to write the solutions in python, but answers in pseudocode are also welcome.

Consider the Array:

    A = list()
    A[0] = 0
    A[1] = 1 
    A[2] = 3
    A[3] = -2
    A[4] = 0
    A[5]  = 1
    A[6] = 0
    A[7] = -3
    A[8] = 2
    A[9] = 3

A non-empty zero index Array A consisting of N integers is above.  A pit in this array is any triplet of integers (P, Q, R) such that:

    0 <= P < Q < R < N;
    sequence [A[P], A[P+1],...,A[Q]] is strictly decreasing,
        i.e. A[P] > A[P+1] > ... > A[Q];
    sequence A[Q], A[Q+1], ...A[R] is stricly increasing,
        i.e. A[Q < A[Q+1] < .. < A[R].

The depth of a pit (P, Q R) is the number min{A[P] - A[Q], A[R] - A[Q]}.

For the above A array, Triplet (2, 3, 4) is one of the pits in this array, because sequence [A[2], A[3]] is stricly decreasing (3 > -2),
and sequence [A[3], A[4]] is strictly increasing (-2 < 0).  Its depth is min{A[2] - A[3], A[4] = A[3]} = 2.  

Triplet (2,3,5) is another pit with depth 3.  Triplet (5,7,8) is yet another pit with depth 4.  There in no pit in the array deeper
(i.e. having depth greater) than 4.

Write a function to return the depth of the deepest pit in Array A:

My solution is on github at the link [solution1][1]  This solutions doesn't produce the correct result, it returns ('0,3,6', 2) and not the ideal ('5,7,8', 4).

Firstly:  what is wrong with my algorithm, secondly I'm certain there's a more efficient way to do this without an inner loop.  Any suggestions are appreciated.

BTW: I found a Java based answer here [SO-Java-Deepest-Pit][2] but the highest scoring question 


  [1]: https://raw.githubusercontent.com/webiken/algorithms/master/solution1.py
  [2]: http://stackoverflow.com/questions/12329711/interview-test-deepest-pit